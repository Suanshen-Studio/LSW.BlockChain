@page "/CreateCarSalesEntry/{Id:int}"
@using LSW.BlockChain.Models
@using LSW.BlockChain.Data
@inject CardService cardService
@inject NavigationManager NavigationManager

<h3>CreateCarSalesEntry</h3>

@if (card == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>CardSalesEntry for @card.Notes</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="cardSalesEntry" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="cardNumber">CardNumber：</label>
                    <InputText class="form-control" id="cardNumber" @bind-Value="cardSalesEntry.CardNumber" />
                </div>
                <div class="form-group">
                    <label for="price">Price：</label>
                    <InputNumber class="form-control" id="price" @bind-Value="cardSalesEntry.Price" />
                </div>
                <div class="form-group">
                    <label for="transactionDate">TransactionDate：</label>
                    <InputDate class="form-control" id="transactionDate" @bind-Value="cardSalesEntry.TransactionDate" />
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>
}

<div>
    <NavLink class="nav-link" href="list">
        Back to List
    </NavLink>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Card card;
    private CardSalesEntry cardSalesEntry = new CardSalesEntry();

    protected override async Task OnInitializedAsync()
    {
        card = await cardService.GetCardAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        cardSalesEntry.CardId = card.Id;
        await cardService.CreateCardSale(cardSalesEntry);
        NavigationManager.NavigateTo("/Details/" + card.Id);
    }
}
